{"version":3,"sources":["components/header.js","components/pageCard.js","components/BackgroundTiles.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComp","styled","header","Header","Card","div","props","bgColor","closed","css","moveToPosition","CardContent","ZebraRow","PageCard","hideCard","text","cardBGColour","cardRef","useRef","ref","className","Container","theme","slide","Tile","BackgroundTiles","setClosed","setSlide","move","containerRef","setShowCard","setHideCard","onClick","console","log","animateContext","React","createContext","MainComp","main","Button","button","ButtonContainer","App","useState","1","2","3","setMove","useEffect","state","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af7b790c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderComp = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 40px;\r\n  width: 100%;\r\n  background-color: black;\r\n  color: white;\r\n  font-size: 1rem;\r\n  div {\r\n    color: white;\r\n    border-right: 1px solid white;\r\n    height: 100%;\r\n    padding: 10px;\r\n  }\r\n`;\r\nexport default function Header() {\r\n  return (\r\n    <HeaderComp>\r\n      <div>Playground</div>\r\n    </HeaderComp>\r\n  );\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst Card = styled.div`\r\n  position: absolute;\r\n  align-self: flex-start;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: ${(props) => props.bgColor};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow-x: hidden;\r\n  overflow-y: hidden;\r\n  scrollbar-width: none;\r\n  -ms-overflow-style: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  ${({ closed }) => {\r\n    if (closed) {\r\n      return css`\r\n        pointer-events: none;\r\n        opacity: 0;\r\n        transition-delay: 0s, 0s;\r\n      `;\r\n    }\r\n    if (!closed) {\r\n      return css`\r\n        opacity: 1;\r\n        overflow-y: auto;\r\n        transition-delay: 0s, 0.4s;\r\n      `;\r\n    }\r\n  }}\r\n  ${({ moveToPosition }) => {\r\n    switch (moveToPosition) {\r\n      case \"left\":\r\n        return css`\r\n          transform: translateX(-100%);\r\n        `;\r\n      case \"right\":\r\n        return css`\r\n          transform: translateX(100%);\r\n        `;\r\n\r\n      default:\r\n        return css`\r\n          transform: translateX(0%);\r\n        `;\r\n    }\r\n  }}\r\n  transition-property: transform,opacity;\r\n  transition-duration: 0.8s, 0.8s;\r\n  /* transition: all 0.8s ease; */\r\n  /* transition: all 0.8s ease; */\r\n  z-index: 1;\r\n`;\r\n\r\nconst CardContent = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 50px 100px 0px;\r\n  color: white;\r\n  font-weight: 600;\r\n  font-size: 2rem;\r\n  transform: ${({ moveToPosition }) => {\r\n    switch (moveToPosition) {\r\n      case \"left\":\r\n        return \"translateX(100%)\";\r\n      case \"right\":\r\n        return \"translateX(-100%)\";\r\n\r\n      default:\r\n        return \"translateX(0%)\";\r\n    }\r\n  }};\r\n  transition: all 0.8s ease;\r\n`;\r\nconst ZebraRow = styled.div`\r\n  width: 80%;\r\n  height: 100px;\r\n  background-color: ${({ bgColor }) => bgColor};\r\n  margin: 20px 0;\r\n`;\r\nexport default function PageCard({\r\n  hideCard,\r\n  moveToPosition,\r\n  bgColor,\r\n  text,\r\n  closed,\r\n}) {\r\n  let cardBGColour = () => {\r\n    switch (text) {\r\n      case \"Abba\":\r\n        return \"blue\";\r\n      case \"Coldplay\":\r\n        return \"Yellow\";\r\n\r\n      default:\r\n        return \"Green\";\r\n    }\r\n  };\r\n\r\n  const cardRef = useRef(null);\r\n\r\n  return (\r\n    <Card\r\n      ref={cardRef}\r\n      className=\"page-card\"\r\n      hideCard={hideCard}\r\n      closed={closed}\r\n      bgColor={bgColor}\r\n      moveToPosition={moveToPosition()}\r\n    >\r\n      <CardContent\r\n        className=\"page-card__card-content\"\r\n        moveToPosition={moveToPosition()}\r\n      >\r\n        <h1>{text}</h1>\r\n        <div>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n          <ZebraRow bgColor={cardBGColour()}></ZebraRow>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport styled, { ThemeProvider, css, keyframes } from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  align-self: flex-start;\r\n  display: flex;\r\n\r\n  ${(props) => {\r\n    const { closed, slide } = props.theme;\r\n    if (closed) {\r\n      return css`\r\n        transform: translateY(500px) scale(0.2);\r\n        transition-delay: 0.4s;\r\n      `;\r\n    } else {\r\n      return css`\r\n        transition-delay: 0s;\r\n\r\n        transform: translateX(${(slide - 2) * -33.3333}%) scale(1);\r\n      `;\r\n    }\r\n  }};\r\n  transition-property: transform;\r\n  transition-duration: 0.8s;\r\n`;\r\n\r\nconst Tile = styled.div`\r\n  width: 100vw;\r\n  height: 900px;\r\n  transform: scale(0.98) translateY(30px);\r\n  background-color: ${({ bgColor }) => bgColor};\r\n  &:hover {\r\n    ${(props) => {\r\n      return props.theme.closed && \"transform: translateY(-30px);\";\r\n    }}\r\n  }\r\n  transition: all 0.4s ease;\r\n`;\r\n\r\nfunction opening(setShowCard) {\r\n  return (e) => {\r\n    if (e.propertyName === \"transform\" && e.elapsedTime === 0.8) {\r\n      console.log(e); //showState+\r\n      setShowCard((state) => {\r\n        if (state === false) {\r\n          return true;\r\n        } else return false;\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport default function BackgroundTiles({\r\n  setClosed,\r\n  setSlide,\r\n  slide,\r\n  closed,\r\n  move,\r\n  setShowCard,\r\n  setHideCard,\r\n}) {\r\n  const containerRef = useRef(\"\");\r\n\r\n  return (\r\n    <ThemeProvider theme={{ closed, slide, move }}>\r\n      <Container ref={containerRef} className=\"bg-tiles-container\">\r\n        <Tile\r\n          onClick={() => {\r\n            setClosed(false);\r\n            setSlide(1);\r\n          }}\r\n          bgColor={\"red\"}\r\n        ></Tile>\r\n        <Tile\r\n          onClick={() => {\r\n            console.log(\"HEAR ME\");\r\n            setClosed(false);\r\n            setSlide(2);\r\n          }}\r\n          bgColor={\"green\"}\r\n        ></Tile>\r\n        <Tile\r\n          onClick={() => {\r\n            setClosed(false);\r\n            setSlide(3);\r\n          }}\r\n          bgColor={\"blue\"}\r\n        ></Tile>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Header from \"./components/header\";\nimport PageCard from \"./components/pageCard\";\nimport BackgroundTiles from \"./components/BackgroundTiles\";\n\nexport const animateContext = React.createContext(false);\n\nconst MainComp = styled.main`\n  display: flex;\n  height: 100%;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst Button = styled.button`\n  height: 30px;\n  width: 60px;\n`;\n\nconst ButtonContainer = styled.div`\n  position: absolute;\n  right: 530px;\n  height: 100px;\n  width: 60px;\n  z-index: 3;\n`;\n\nfunction App() {\n  const [move, setMove] = useState({ 1: true, 2: false, 3: false });\n  const [slide, setSlide] = useState(1);\n  const [closed, setClosed] = useState(true);\n  const [hideCard, setHideCard] = useState(true);\n\n  useEffect(() => {\n    setMove((state) => {\n      const placeholder = { 1: false, 2: false, 3: false };\n      const newState = { ...placeholder, [slide]: true };\n      return newState;\n    });\n  }, [slide]);\n\n  return (\n    <>\n      <Header />\n      <MainComp>\n        <animateContext.Provider value={{ move, closed }}>\n          <PageCard\n            hideCard={hideCard}\n            closed={closed}\n            text={\"Abba\"}\n            moveToPosition={() =>\n              !move[\"2\"] && !move[\"3\"] ? \"center\" : \"left\"\n            }\n          />\n\n          <PageCard\n            hideCard={hideCard}\n            closed={closed}\n            text={\"Coldplay\"}\n            moveToPosition={() => {\n              if (move[\"2\"]) {\n                return \"center\";\n              } else if (move[\"1\"]) {\n                return \"right\";\n              } else {\n                return \"left\";\n              }\n            }}\n          />\n\n          <PageCard\n            hideCard={hideCard}\n            closed={closed}\n            text={\"Outkast\"}\n            moveToPosition={() => {\n              if (move[\"3\"]) {\n                return \"center\";\n              } else {\n                return \"right\";\n              }\n            }}\n          />\n        </animateContext.Provider>\n        <ButtonContainer>\n          <Button\n            onClick={() => {\n              //if it's open\n              //show card\n              setClosed((state) => (state ? false : true));\n            }}\n          >\n            Toggle\n          </Button>\n          <Button\n            onClick={() => {\n              setSlide((value) => {\n                return value < 3 ? ++value : value;\n              });\n            }}\n          >\n            Next\n          </Button>\n          <Button\n            onClick={() => {\n              setSlide((value) => (value > 1 ? --value : value));\n            }}\n          >\n            Previous\n          </Button>\n        </ButtonContainer>\n        <BackgroundTiles\n          setHideCard={setHideCard}\n          hideCard={hideCard}\n          setSlide={setSlide}\n          slide={slide}\n          setClosed={setClosed}\n          closed={closed}\n          move={move}\n        />\n      </MainComp>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}